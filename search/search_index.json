{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Accompanist is a group of libraries that aim to supplement Jetpack Compose with features that are commonly required by developers but not yet available. This version is meant to port some of the Accompanist libraries to Compose Multiplatform, so it can be used on the Jvm, Android, and Apple platforms.</p> <p>Current Library Compose Multiplatform Version: 1.4.0</p> <p>Current Library Jetpack Compose Version: 1.4.0</p> <p>Currently, Accompanist contains:</p>"},{"location":"#placeholder","title":"\u23f3 Placeholder","text":"<p>A library that provides easy-to-use modifiers for displaying a placeholder UI while content is loading.</p>"},{"location":"#flow-layouts-soon-to-be-deprecated-upstreamed-in-compose-14","title":"\ud83c\udf0a Flow Layouts (Soon to be deprecated - Upstreamed in Compose 1.4)","text":"<p>A library that adds Flexbox-like layout components to Jetpack Compose.</p>"},{"location":"#swipe-to-refresh-deprecated","title":"\u2b07\ufe0f Swipe to Refresh (Deprecated)","text":"<p>See our Migration Guide for migrating to PullRefresh in Compose Material.</p>"},{"location":"#pager-deprecated","title":"\ud83d\udcd6 Pager (Deprecated)","text":"<p>See our Migration Guide for migrating to Pager in Compose.</p>"},{"location":"#future","title":"Future?","text":"<p>Any of the features available in this group of libraries may become obsolete in the future, at which point they will (probably) become deprecated. </p> <p>We will aim to provide a migration path (where possible), to whatever supersedes the functionality.</p>"},{"location":"#why-the-name","title":"Why the name?","text":"<p>The library is all about adding some utilities around Compose. Music composing is done by a composer, and since this library is about supporting composition, the supporting role of an accompanist felt like a good name.</p>"},{"location":"#contributions","title":"Contributions","text":"<p>Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.</p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2020 The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"contributing/","title":"How to Contribute","text":"<p>We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow.</p>"},{"location":"contributing/#new-featureslibraries","title":"New Features/Libraries","text":"<p>Before contributing large new features and/or libraries please start a discussion  with us first via GitHub Issues and check that we can support it. We are unable to support all new features, even though we wish we could! If we  are unable to support adding your feature, we always encourage you to open source it  in your own repository to help the Compose community grow.</p>"},{"location":"contributing/#contributor-license-agreement","title":"Contributor License Agreement","text":"<p>Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution, this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://cla.developers.google.com/ to see your current agreements on file or to sign a new one.</p> <p>You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again.</p>"},{"location":"contributing/#code-reviews","title":"Code Reviews","text":"<p>All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.</p>"},{"location":"contributing/#api-changes","title":"API Changes","text":"<p>If you are changing any public APIs, you need to run <code>./gradlew metalavaGenerateSignatureRelease</code> which will  update the API signatures.</p>"},{"location":"contributing/#formatting","title":"Formatting","text":"<p>To apply formatting, we use spotless. Run <code>./gradlew :pager:spotlessApply</code> to format the code according  to the spec.</p>"},{"location":"flowlayout/","title":"Jetpack Compose Flow Layouts","text":"<p>Flow layouts adapted from the versions which were available in Jetpack Compose until they were removed.</p> <p>Unlike the standard <code>Row</code> and <code>Column</code> composables, these layout children across multiple rows/columns if they exceed the available space.</p>"},{"location":"flowlayout/#usage","title":"Usage","text":"<pre><code>FlowRow {\n// row contents\n}\n\nFlowColumn {\n// column contents\n}\n</code></pre> <p>For examples, refer to the samples.</p>"},{"location":"flowlayout/#download","title":"Download","text":"<pre><code>repositories {\nmavenCentral()\n}\n\ndependencies {\nimplementation \"com.google.accompanist:accompanist-flowlayout:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"migration/","title":"Migration from dev.chrisbanes.accompanist","text":"<p>In March 2021, the Accompanist project moved from github.com/chrisbanes/accompanist to github.com/google/accompanist. At the same time we migrated the libraries over to a new package name and Maven group ID.</p> <p>As a summary:</p> <ul> <li>All code was refactored from the <code>dev.chrisbanes.accompanist</code> root package to <code>com.google.accompanist</code> package.</li> <li>The Maven group ID was changed from <code>dev.chrisbanes.accompanist</code> to <code>com.google.accompanist</code>.</li> </ul>"},{"location":"migration/#semi-automatic-migration","title":"Semi-automatic migration...","text":"<p>The following methods below are available for your information only, but may help if you need to migrate from the old package name. </p> <p>Warning</p> <p>Use these at your own risk, but they have worked on multiple projects from my testing. It's a good idea to make sure that you've made a backup or committed any changes before running these.</p>"},{"location":"migration/#android-studio-intellij","title":"Android Studio / IntelliJ","text":"<p>You can use the Replace in Path pane (\u21e7\u2318R on Mac) in Android Studio to do a project-wide search and replace.</p> <p></p> <ul> <li>Find query: <code>dev.chrisbanes.accompanist</code></li> <li>Replace string: <code>com.google.accompanist</code></li> <li>Optional: Set the file mask to <code>*.kt</code> so that only Kotlin files are searched. Repeat for <code>*.gradle</code>.</li> </ul> <p>Similar can be achieved in Visual Studio Code. Other IDEs / text editors are available.</p>"},{"location":"migration/#yolo-commands","title":"YOLO commands","text":"<p>These commands while automatically replace any imports and Gradle dependencies for the project in the current directory.</p>"},{"location":"migration/#macos","title":"MacOS","text":"<pre><code>find . -type f \\( -name '*.kt' -or -name '*.gradle*' \\) \\\n-exec sed -i '' 's/dev\\.chrisbanes\\.accompanist/com\\.google\\.accompanist/' {} \\;\n</code></pre>"},{"location":"migration/#linux","title":"Linux","text":"<pre><code>find . -type f \\( -name '*.kt' -or -name '*.gradle*' \\) \\\n-exec sed -i 's/dev\\.chrisbanes\\.accompanist/com\\.google\\.accompanist/' {} \\;\n</code></pre>"},{"location":"pager/","title":"Pager layouts","text":"<p>A library which provides paging layouts for Jetpack Compose. If you've used Android's <code>ViewPager</code> before, it has similar properties.</p> <p>Warning</p> <p>This library is deprecated, with official pager support in <code>androidx.compose.foundation.pager</code> The original documentation is below the migration guide.</p>"},{"location":"pager/#migration","title":"Migration","text":"<ol> <li>Make sure you are using Compose 1.4.0+ before attempting to migrate to <code>androidx.compose.foundation.pager</code>.</li> <li>Change <code>com.google.accompanist.pager.HorizontalPager</code> to <code>androidx.compose.foundation.pager.HorizontalPager</code>, and the same for <code>com.google.accompanist.pager.VerticalPager</code> to change to <code>androidx.compose.foundation.pager.VerticalPager</code></li> <li>Change <code>count</code> variable to <code>pageCount</code>.</li> <li>Change <code>itemSpacing</code> parameter to <code>pageSpacing</code>.</li> <li>Change any usages of <code>rememberPagerState()</code> to <code>androidx.compose.foundation.pager.rememberPagerState()</code></li> <li>For more mappings - see the migration table below.</li> <li>Run your changes on device and check to see if there are any differences.</li> </ol> <p>One thing to note is that there is a new parameter on <code>androidx.compose.foundation.Pager</code>, for <code>pageSize</code>, by default this uses a <code>PageSize.Fill</code>, but can also be changed to use a fixed size, like <code>PageSize.Fixed(200.dp)</code> for a fixed size paging.</p>"},{"location":"pager/#migration-table","title":"Migration Table","text":"<p>The following is a mapping of the pager classes from accompanist to androidx.compose:</p> accompanist/pager androidx.compose.foundation <code>HorizontalPager</code> <code>androidx.compose.foundation.pager.HorizontalPager</code> <code>VerticalPager</code> <code>androidx.compose.foundation.pager.VerticalPager</code> <code>rememberPagerState</code> <code>androidx.compose.foundation.pager.rememberPagerState</code> <code>PagerState#pageCount</code> Use <code>canScrollForward</code> or <code>canScrollBackward</code> <code>calculateCurrentOffsetForPage</code> Use <code>(pagerState.currentPage - page) + pagerState.currentPageOffsetFraction</code> <code>PagerState#currentPageOffset</code> <code>PagerState#currentPageOffsetFraction</code> <code>Modifier.pagerTabIndicatorOffset()</code> Implement it yourself, or still include and use <code>accompanist-pager-indicators</code>, it now supports <code>androidx.compose.foundation.pager.PagerState</code> <code>HorizontalPagerIndicator</code> Implement it yourself, or still include and use <code>accompanist-pager-indicators</code>, it now supports <code>androidx.compose.foundation.pager.HorizontalPager</code> by explicitly providing a <code>pageCount</code> param to the <code>HorizontalPagerIndicator</code> method <code>VerticalPagerIndicator</code> Implement it yourself, or still include and use <code>accompanist-pager-indicators</code>, it now supports <code>androidx.compose.foundation.pager.HorizontalPager</code> by explicitly providing a <code>pageCount</code> param to the <code>HorizontalPagerIndicator</code> method <code>PagerDefaults.flingBehavior()</code> <code>androidx.compose.foundation.pager.PagerDefaults.flingBehavior()</code> <p>The biggest change is that <code>HorizontalPager</code> and <code>VerticalPager</code>'s number of pages is now called <code>pageCount</code> instead of <code>count</code>.</p>"},{"location":"pager/#deprecated-guidance-for-accompanist-pager","title":"Deprecated Guidance for Accompanist Pager","text":"<p>The following is the deprecated guide for using Pager in Accompanist. Please see above migration section for how to use the <code>androidx.compose</code> Pager.</p>"},{"location":"pager/#horizontalpager","title":"HorizontalPager","text":"<p><code>HorizontalPager</code> is a layout which lays out items in a horizontal row, and allows the user to horizontally swipe between pages.</p>          Your browser does not support the video tag.      HorizontalPager demo <p>The simplest usage looks like the following:</p> <pre><code>// Display 10 items\nHorizontalPager(count = 10) { page -&gt;\n// Our page content\nText(\ntext = \"Page: $page\",\nmodifier = Modifier.fillMaxWidth()\n)\n}\n</code></pre> <p>If you want to jump to a specific page, you either call call <code>pagerState.scrollToPage(index)</code> or  <code>pagerState.animateScrollToPage(index)</code> method in a <code>CoroutineScope</code>.</p> <pre><code>val pagerState = rememberPagerState()\n\nHorizontalPager(count = 10, state = pagerState) { page -&gt;\n// ...page content\n}\n\n// Later, scroll to page 2\nscope.launch {\npagerState.scrollToPage(2)\n}\n</code></pre>"},{"location":"pager/#verticalpager","title":"VerticalPager","text":"<p><code>VerticalPager</code> is very similar to <code>HorizontalPager</code> but items are laid out vertically, and react to vertical swipes:</p>          Your browser does not support the video tag.      VerticalPager demo <pre><code>// Display 10 items\nVerticalPager(count = 10) { page -&gt;\n// Our page content\nText(\ntext = \"Page: $page\",\nmodifier = Modifier.fillMaxWidth()\n)\n}\n</code></pre>"},{"location":"pager/#lazy-creation","title":"Lazy creation","text":"<p>Pages in both <code>HorizontalPager</code> and <code>VerticalPager</code> are lazily composed and laid-out as required by the layout. As the user scrolls through pages, any pages which are no longer required are removed from the content.</p> <p>Under the covers, <code>HorizontalPager</code> use <code>LazyRow</code>, and <code>VerticalPager</code> uses <code>LazyColumn</code>.</p>"},{"location":"pager/#content-padding","title":"Content Padding","text":"<p><code>HorizontalPager</code> and <code>VerticalPager</code> both support the setting of content padding, which allows you to influence the maximum size and alignment of pages.</p> <p>You can see how different content padding values affect a <code>HorizontalPager</code> below:</p> start = 64.dp <p>Setting the start padding has the effect of aligning the pages towards the end.</p> <p></p> <pre><code>HorizontalPager(\ncount = 4,\ncontentPadding = PaddingValues(start = 64.dp),\n) { page -&gt;\n// page content\n}\n</code></pre> horizontal = 32.dp <p>Setting both the start and end padding to the same value has the effect of centering the item horizontally.</p> <p></p> <pre><code>HorizontalPager(\ncount = 4,\ncontentPadding = PaddingValues(horizontal = 32.dp),\n) { page -&gt;\n// page content\n}\n</code></pre> end = 64.dp <p>Setting the end padding has the effect of aligning the pages towards the start.</p> <p></p> <pre><code>HorizontalPager(\ncount = 4,\ncontentPadding = PaddingValues(end = 64.dp),\n) { page -&gt;\n// page content\n}\n</code></pre> <p>Similar effects for <code>VerticalPager</code> can be achieved by setting the <code>top</code> and <code>bottom</code> values. The value <code>32.dp</code> is only used here as an example, you can set each of the padding dimensions to whatever value you wish.</p>"},{"location":"pager/#item-scroll-effects","title":"Item scroll effects","text":"<p>A common use-case is to apply effects to your pager items, using the scroll position to drive those effects.</p> <p>The HorizontalPagerTransitionSample demonstrates how this can be done:</p>          Your browser does not support the video tag.      Item effects demo <p>The scope provided to your pager content allows apps to easily reference the <code>currentPage</code> and <code>currentPageOffset</code>. The effects can then be calculated using those values. We provide the <code>calculateCurrentOffsetForPage()</code> extension functions to support calculation of the 'offset' for a given page:</p> <pre><code>import com.google.accompanist.pager.calculateCurrentOffsetForPage\n\nHorizontalPager(count = 4) { page -&gt;\nCard(\nModifier\n.graphicsLayer {\n// Calculate the absolute offset for the current page from the\n// scroll position. We use the absolute value which allows us to mirror\n// any effects for both directions\nval pageOffset = calculateCurrentOffsetForPage(page).absoluteValue\n\n// We animate the scaleX + scaleY, between 85% and 100%\nlerp(\nstart = 0.85f,\nstop = 1f,\nfraction = 1f - pageOffset.coerceIn(0f, 1f)\n).also { scale -&gt;\nscaleX = scale\nscaleY = scale\n}\n\n// We animate the alpha, between 50% and 100%\nalpha = lerp(\nstart = 0.5f,\nstop = 1f,\nfraction = 1f - pageOffset.coerceIn(0f, 1f)\n)\n}\n) {\n// Card content\n}\n}\n</code></pre>"},{"location":"pager/#reacting-to-page-changes","title":"Reacting to page changes","text":"<p>The <code>PagerState.currentPage</code> property is updated whenever the selected page changes. You can use the <code>snapshotFlow</code> function to observe changes in a flow:</p> <pre><code>val pagerState = rememberPagerState()\n\nLaunchedEffect(pagerState) {\n// Collect from the pager state a snapshotFlow reading the currentPage\nsnapshotFlow { pagerState.currentPage }.collect { page -&gt;\nAnalyticsService.sendPageSelectedEvent(page)\n}\n}\n\nVerticalPager(\ncount = 10,\nstate = pagerState,\n) { page -&gt;\nText(text = \"Page: $page\")\n}\n</code></pre>"},{"location":"pager/#indicators","title":"Indicators","text":"<p>We also publish a sibling library called <code>pager-indicators</code> which provides some simple indicator composables for use with <code>HorizontalPager</code> and <code>VerticalPager</code>.</p>          Your browser does not support the video tag.      Pager indicators demo <p>The HorizontalPagerWithIndicatorSample and VerticalPagerWithIndicatorSample show you how to use these.</p>"},{"location":"pager/#integration-with-tabs","title":"Integration with Tabs","text":"<p>A common use-case for <code>HorizontalPager</code> is to be used in conjunction with a <code>TabRow</code> or <code>ScrollableTabRow</code>.</p>          Your browser does not support the video tag.      HorizontalPager + TabRow <p>Provided in the <code>pager-indicators</code> library is a modifier which can be used on a tab indicator like so:</p> <pre><code>val pagerState = rememberPagerState()\n\nTabRow(\n// Our selected tab is our current page\nselectedTabIndex = pagerState.currentPage,\n// Override the indicator, using the provided pagerTabIndicatorOffset modifier\nindicator = { tabPositions -&gt;\nTabRowDefaults.Indicator(\nModifier.pagerTabIndicatorOffset(pagerState, tabPositions)\n)\n}\n) {\n// Add tabs for all of our pages\npages.forEachIndexed { index, title -&gt;\nTab(\ntext = { Text(title) },\nselected = pagerState.currentPage == index,\nonClick = { /* TODO */ },\n)\n}\n}\n\nHorizontalPager(\ncount = pages.size,\nstate = pagerState,\n) { page -&gt;\n// TODO: page content\n}\n</code></pre>"},{"location":"pager/#changes-in-v0190","title":"Changes in v0.19.0","text":"<p>In v0.19.0 both <code>HorizontalPager</code> and <code>VerticalPager</code> were re-written to be based on <code>LazyRow</code> and <code>LazyColumn</code> respectively. As part of this change, a number of feature and API changes were made:</p>"},{"location":"pager/#pagerstate","title":"PagerState","text":"<ul> <li>The <code>pageCount</code> parameter on <code>rememberPagerState()</code> has been removed, replaced with the <code>count</code> parameter on <code>HorizontalPager()</code> and <code>VerticalPager()</code>.</li> <li>The <code>animationSpec</code>, <code>initialVelocity</code> and <code>skipPages</code> parameters on <code>animateScrollToPage()</code> have been removed. The lazy components handle this automatically.</li> </ul>"},{"location":"pager/#horizontalpager-verticalpager","title":"HorizontalPager &amp; VerticalPager","text":"<ul> <li>Ability to set <code>contentPadding</code> (see above).</li> <li>Ability to specify a <code>key</code> for each page.</li> <li>The <code>horizontalAlignment</code> parameter on <code>HorizontalPager</code>, and the <code>verticalAlignment</code> parameter on <code>VerticalPager</code> have been removed. A similar effect can be implemented with an appropriate content padding (see above).</li> <li>The <code>infiniteLooping</code> parameter and feature have been removed. A sample demonstrating how to achieve this effect can be found here.</li> <li>The <code>offscreenLimit</code> parameter has been removed. We no longer have control of what items are laid out 'off screen'.</li> <li>The <code>dragEnabled</code> parameter has removed.</li> <li><code>PagerScope</code> (the page item scope) no longer implements <code>BoxScope</code>.</li> </ul>"},{"location":"pager/#usage","title":"Usage","text":"<pre><code>repositories {\nmavenCentral()\n}\n\ndependencies {\nimplementation \"com.google.accompanist:accompanist-pager:&lt;version&gt;\"\n\n// If using indicators, also depend on\nimplementation \"com.google.accompanist:accompanist-pager-indicators:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"pager/#library-snapshots","title":"Library Snapshots","text":"<p>Snapshots of the current development version of this library are available, which track the latest commit. See here for more information on how to use them.</p>"},{"location":"pager/#contributions","title":"Contributions","text":"<p>Please contribute! We will gladly review any pull requests. Make sure to read the Contributing page first though.</p>"},{"location":"pager/#license","title":"License","text":"<pre><code>Copyright 2021 The Android Open Source Project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"swiperefresh/","title":"Swipe Refresh for Jetpack Compose","text":"<p>Warning</p> <p>This library is deprecated, with official pull refresh support in androidx.compose.material.pullrefresh. The migration guide and original documentation is below.</p>"},{"location":"swiperefresh/#migration","title":"Migration","text":"<p>Accompanist SwipeRefresh has been replaced by PullRefresh in Compose Material 1.3.0. The implementation is similar but instead of being a Composable function, it is a Modifier that can be applied to a Composable function.</p> <p>A simple example is as follows:</p> <pre><code>val viewModel: MyViewModel = viewModel()\nval refreshing by viewModel.isRefreshing\n\nval pullRefreshState = rememberPullRefreshState(refreshing, { viewModel.refresh() })\n\nBox(Modifier.pullRefresh(pullRefreshState)) {\nLazyColumn(Modifier.fillMaxSize()) {\n...\n}\n\nPullRefreshIndicator(refreshing, pullRefreshState, Modifier.align(Alignment.TopCenter))\n}\n</code></pre>"},{"location":"swiperefresh/#migration-steps","title":"Migration steps","text":"<ol> <li>Replace SwipeRefresh with a Box or other layout of your choice, save your <code>onRefresh</code> lambda for the next step.</li> <li>Replace <code>rememberSwipeRefreshState()</code> with <code>rememberPullRefreshState(refreshing, onRefresh)</code></li> <li>Add either the default <code>PullRefreshIndicator</code> or your own custom implementation to your layout.</li> </ol>"},{"location":"swiperefresh/#custom-indicator","title":"Custom Indicator","text":"<p>Instead of using the provided <code>PullRefreshIndicator</code> composable, you can create your own custom indicator. A full sample can be seen in the Compose samples.</p>"},{"location":"swiperefresh/#original-docs","title":"Original Docs","text":"<p>A library which provides a layout which provides the swipe-to-refresh UX pattern, similar to Android's <code>SwipeRefreshLayout</code>.</p>          Your browser does not support the video tag.      SwipeRefresh demo"},{"location":"swiperefresh/#usage","title":"Usage","text":"<p>To implement this UX pattern there are two key APIs which are needed: <code>SwipeRefresh</code>, which is provides the layout, and <code>rememberSwipeRefreshState()</code> which provides some remembered state.</p> <p>The basic usage of a <code>SwipeRefresh</code> using a ViewModel looks like so:</p> <pre><code>val viewModel: MyViewModel = viewModel()\nval isRefreshing by viewModel.isRefreshing.collectAsState()\n\nSwipeRefresh(\nstate = rememberSwipeRefreshState(isRefreshing),\nonRefresh = { viewModel.refresh() },\n) {\nLazyColumn {\nitems(30) { index -&gt;\n// TODO: list items\n}\n}\n}\n</code></pre> <p>The full example, including the view model implementation can be found here.</p> <p>The content needs to be 'vertically scrollable' for <code>SwipeRefresh()</code> to be able to react to swipe gestures. Layouts such as <code>LazyColumn</code> are automatically vertically scrollable, but others such as <code>Column</code> or <code>LazyRow</code> are not. In those instances, you can provide a <code>Modifier.verticalScroll</code> modifier to that content like so:</p> <pre><code>SwipeRefresh(\n// ...\n) {\nColumn(Modifier.verticalScroll(rememberScrollState())) {\n// content\n}\n}\n</code></pre>"},{"location":"swiperefresh/#indicating-a-refresh-without-swiping","title":"Indicating a refresh without swiping","text":"<p>As this library is built with a separate state object, it's easy to display a refreshing indicator without a swipe to triggering it.</p> <p>The unrealistic example below displays a forever refreshing indicator:</p> <pre><code>val swipeRefreshState = rememberSwipeRefreshState(true)\n\nSwipeRefresh(\nstate = swipeRefreshState,\nonRefresh = { /* todo */ },\n) {\nLazyColumn {\nitems(30) { index -&gt;\n// TODO: list items\n}\n}\n}\n</code></pre>"},{"location":"swiperefresh/#indicator","title":"Indicator","text":"<p>The library provides a default indicator: <code>SwipeRefreshIndicator()</code>, which <code>SwipeRefresh</code> uses automatically. You can customize the default indicator, and even provide your own indicator content using the <code>indicator</code> slot.</p>"},{"location":"swiperefresh/#customizing-default-indicator","title":"Customizing default indicator","text":"<p>To customize the default indicator, we can provide our own <code>indicator</code> content block, to call <code>SwipeRefreshIndicator()</code> with customized parameters:</p> Sample <pre><code>SwipeRefresh(\nstate = /* ... */,\nonRefresh = /* ... */,\nindicator = { state, trigger -&gt;\nSwipeRefreshIndicator(\n// Pass the SwipeRefreshState + trigger through\nstate = state,\nrefreshTriggerDistance = trigger,\n// Enable the scale animation\nscale = true,\n// Change the color and shape\nbackgroundColor = MaterialTheme.colors.primary,\nshape = MaterialTheme.shapes.small,\n)\n}\n)\n</code></pre> Demo video <p>          Your browser does not support the video tag.      Tweaked indicator demo </p>"},{"location":"swiperefresh/#custom-indicator_1","title":"Custom indicator","text":"<p>As mentioned, you can also provide your own custom indicator content. A <code>SwipeRefreshState</code> is provided to <code>indicator</code> content slot, which contains the information necessary to react to a swipe refresh gesture.</p> <p>An example of a custom indicator is provided here.</p>"},{"location":"swiperefresh/#download","title":"Download","text":"<pre><code>repositories {\nmavenCentral()\n}\n\ndependencies {\nimplementation \"com.google.accompanist:accompanist-swiperefresh:&lt;version&gt;\"\n}\n</code></pre> <p>Snapshots of the development version are available in Sonatype's <code>snapshots</code> repository. These are updated on every commit.</p>"},{"location":"updating/","title":"Updating &amp; releasing Accompanist","text":"<p>This doc is mostly for maintainers.</p>"},{"location":"updating/#new-features-bugfixes","title":"New features &amp; bugfixes","text":"<p>All new features should be uploaded as PRs against the <code>main</code> branch. </p> <p>Once merged into <code>main</code>, they will be automatically merged into the <code>snapshot</code> branch.</p>"},{"location":"updating/#jetpack-compose-snapshots","title":"Jetpack Compose Snapshots","text":"<p>We publish snapshot versions of Accompanist, which depend on a <code>SNAPSHOT</code> versions of Jetpack Compose. These are built from the <code>snapshot</code> branch.</p>"},{"location":"updating/#updating-to-a-newer-compose-snapshot","title":"Updating to a newer Compose snapshot","text":"<p>As mentioned above, updating to a new Compose snapshot is done by submitting a new PR against the <code>snapshot</code> branch:</p> <pre><code>git checkout snapshot &amp;&amp; git pull\n# Create branch for PR\ngit checkout -b update_snapshot\n</code></pre> <p>Now edit the project to depend on the new Compose SNAPSHOT version:</p> <p>Edit <code>/gradle/libs.versions.toml</code>:</p> <p>Under <code>[versions]</code>:</p> <ol> <li>Update the <code>composesnapshot</code> property to be the snapshot number</li> <li>Ensure that the <code>compose</code> property is correct</li> </ol> <p>Make sure the project builds and test pass: <pre><code>./gradlew check\n</code></pre></p> <p>Now <code>git commit</code> the changes and push to GitHub.</p> <p>Finally create a PR (with the base branch as <code>snapshot</code>) and send for review.</p>"},{"location":"updating/#releasing","title":"Releasing","text":"<p>Once the next Jetpack Compose version is out, we're ready to push a new release:</p>"},{"location":"updating/#1-merge-snapshot-into-main","title":"#1: Merge <code>snapshot</code> into <code>main</code>","text":"<p>First we merge the <code>snapshot</code> branch into <code>main</code>:</p> <pre><code>git checkout snapshot &amp;&amp; git pull\ngit checkout main &amp;&amp; git pull\n\n# Create branch for PR\ngit checkout -b main_snapshot_merge\n\n# Merge in the snapshot branch\ngit merge snapshot\n</code></pre>"},{"location":"updating/#2-update-dependencies","title":"#2: Update dependencies","text":"<p>Edit <code>/gradle/libs.versions.toml</code>:</p> <p>Under <code>[versions]</code>:</p> <ol> <li>Update the <code>composesnapshot</code> property to a single character (usually <code>-</code>). This disables the snapshot repository.</li> <li>Update the <code>compose</code> property to match the new release (i.e. <code>1.0.0-beta06</code>)</li> </ol> <p>Make sure the project builds and test pass: <pre><code>./gradlew check\n</code></pre></p> <p>Commit the changes.</p>"},{"location":"updating/#3-bump-the-version-number","title":"#3: Bump the version number","text":"<p>Edit gradle.properties:</p> <ul> <li>Update the <code>VERSION_NAME</code> property and remove the <code>-SNAPSHOT</code> suffix.</li> </ul> <p>Commit the changes, using the commit message containing the new version name.</p>"},{"location":"updating/#4-push-to-github","title":"#4: Push to GitHub","text":"<p>Push the branch to GitHub and create a PR against the <code>main</code> branch, and send for review. Once approved and merged, it will be automatically deployed to Maven Central.</p>"},{"location":"updating/#5-create-release","title":"#5: Create release","text":"<p>Once the above PR has been approved and merged, we need to create the GitHub release:</p> <ul> <li>Open up the Releases page.</li> <li>At the top you should see a 'Draft' release, auto populated with any PRs since the last release. Click 'Edit'.</li> <li>Make sure that the version number matches what we released (the tool guesses but is not always correct).</li> <li>Double check everything, then press 'Publish release'.</li> </ul> <p>At this point the release is published. This will trigger the docs action to run, which will auto-deploy a new version of the website.</p>"},{"location":"updating/#6-prepare-the-next-development-version","title":"#6: Prepare the next development version","text":"<p>The current release is now finished, but we need to update the version for the next development version:</p> <p>Edit gradle.properties:</p> <ul> <li>Update the <code>VERSION_NAME</code> property, by increasing the version number, and adding the <code>-SNAPSHOT</code> suffix.</li> <li>Example: released version: <code>0.3.0</code>. Update to <code>0.3.1-SNAPSHOT</code></li> </ul> <p><code>git commit</code> and push to <code>main</code>.</p> <p>Finally, merge all of these changes back to <code>snapshot</code>:</p> <pre><code>git checkout snapshot &amp;&amp; git pull\ngit merge main\ngit push\n</code></pre>"}]}